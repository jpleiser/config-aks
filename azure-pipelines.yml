# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - feature/*
      - develop
      - main
  tags:
    include:
      - '*'

pool:
  vmImage: "ubuntu-latest"

variables:
  cr_url: kdopacr.azurecr.io
  namespace: innovateavanade
  docker_repo: $(namespace)/einstein-timeout

steps:
  - task: SonarQubePrepare@4
    displayName: Sonar Prepare Analysis
    inputs:
      SonarQube: 'SonarQubeKDOP'
      scannerMode: 'CLI'
      configMode: 'file'

  - task: Gradle@2
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'clean build'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      sonarQubeRunAnalysis: false

  - task: SonarQubeAnalyze@4
    displayName: Run Sonar

  - task: SonarQubePublish@4
    displayName: Publish Sonar Result
    inputs:
      pollingTimeoutSec: '300'

  - task: sonar-buildbreaker@7
    displayName: Break Build on Quality Gate Fail
    inputs:
      SonarQube: 'SonarQubeKDOP'

  - script: docker build -t $(cr_url)/$(docker_repo):$(Build.SourceBranchName) -t $(cr_url)/$(docker_repo):latest . --label "buildId='$(Build.BuildId)'" --label "buildUri='$(Build.BuildUri)'"
    displayName: "Docker Build"

  - task: Docker@2
    displayName: 'CR Push Image Tag $(Build.SourceBranchName)'
    condition: or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/tags/'), eq(variables['Build.SourceBranchName'], 'develop'))
    inputs:
      containerRegistry: 'kdopacr'
      repository: '$(docker_repo)'
      command: 'push'
      tags: '$(Build.SourceBranchName)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Helmchart Artifacts'    
    inputs:
      pathToPublish: '$(Build.SourcesDirectory)/infra/helmchart'
      artifactName: helmchart

#  - task: PublishBuildArtifacts@1
#    displayName: 'Publish APIM Artifacts'
#    inputs:
#      pathToPublish: '$(Build.SourcesDirectory)/infra/apim'
#      artifactName: apim